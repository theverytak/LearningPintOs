--- mobibench_original.c	2016-10-11 16:07:09.449366465 +0900
+++ mobibench_fix.c	2016-10-11 16:41:28.747901855 +0900
@@ -25,6 +25,7 @@
 #define __USE_GNU
 #include <fcntl.h>
 #include <time.h>
+#include <sys/time.h>
 #include <string.h> 
 
 #include <sys/mman.h>
@@ -181,8 +182,8 @@
 
 pthread_mutex_t fd_lock = PTHREAD_MUTEX_INITIALIZER;
 
-long long get_current_utime(void); // get current time
-long long get_relative_utime(long long start); // and relative time
+long long get_current_ntime(void); // get current time
+long long get_relative_ntime(long long start); // and relative time
 
 void clearState(void)
 {
@@ -208,32 +209,32 @@
 	return g_state;
 }
 
-void print_time(struct timeval T1, struct timeval T2)
+void print_time(struct timespec TS1, struct timespec TS2)
 {
-	long sec,usec;
+	long sec, nsec;
 	double time;
 	double rate;
 	
 	time_t t;
 	
-	if(T1.tv_usec > T2.tv_usec)
+	if(TS1.tv_nsec > TS2.tv_nsec)
 	{
-		sec = T2.tv_sec - T1.tv_sec -1;
-		usec = 1000000 + T2.tv_usec - T1.tv_usec;
+		sec = TS2.tv_sec - TS1.tv_sec -1;
+		nsec = 1000000000 + TS2.tv_nsec - TS1.tv_nsec;
 	}
 	else
 	{
-		sec = T2.tv_sec - T1.tv_sec;
-		usec = T2.tv_usec - T1.tv_usec;
+		sec = TS2.tv_sec - TS1.tv_sec;
+		nsec = TS2.tv_nsec - TS1.tv_nsec;
 	}
 
-	time = (double)sec + (double)usec/1000000;
+	time = (double)sec + (double)nsec/1000000000;
 	
 	if(db_test_enable == 0)
 	{
 		rate = kilo64*1024*num_threads/time;
-		printf("[TIME] :%8ld sec %06ldus. \t%.0f B/sec, \t%.2f KB/sec, \t%.2f MB/sec.",sec,usec, rate, rate/1024, rate/1024/1024);
-		if(Latency_state==1) fprintf(Latency_fp,"[TIME] :%8ld sec %06ldus. \t%.0f B/sec, \t%.2f KB/sec, \t%.2f MB/sec.",sec, usec, rate, rate/1024, rate/1024/1024);
+		printf("[TIME] :%8ld sec %09ldus. \t%.0f B/sec, \t%.2f KB/sec, \t%.2f MB/sec.",sec,nsec, rate, rate/1024, rate/1024/1024);
+		if(Latency_state==1) fprintf(Latency_fp,"[TIME] :%8ld sec %09ldus. \t%.0f B/sec, \t%.2f KB/sec, \t%.2f MB/sec.",sec, nsec, rate, rate/1024, rate/1024/1024);
 		if(g_access == MODE_RND_WRITE || g_access == MODE_RND_READ)
 		{
 			printf(" %.2f IOPS(%dKB) ", rate/1024/reclen, (int)reclen);
@@ -254,7 +255,7 @@
 	else
 	{
 		rate = db_transactions*num_threads/time;
-		printf("[TIME] :%8ld sec %06ldus. \t%.2f Transactions/sec\n",sec,usec, rate);
+		printf("[TIME] :%8ld sec %09ldus. \t%.2f Transactions/sec\n",sec,nsec, rate);
 #ifdef ANDROID_APP
 		tps = (float)rate;
 #endif		
@@ -1046,7 +1047,7 @@
 					}
 				}		
 				// get current time for latency
-				if(Latency_state==1 || print_IOPS == 1) IO_Latency=get_current_utime(); 
+				if(Latency_state==1 || print_IOPS == 1) IO_Latency=get_current_ntime(); 
 
 			 	if(write(fd, buf, real_reclen)<0)
 			 	{
@@ -1070,13 +1071,13 @@
 				if(Latency_state == 1 || print_IOPS ==1)
 				{
 					// get Delta time for an IO
-					Delta_Latency = (float)((float)get_relative_utime(IO_Latency)); 
+					Delta_Latency = (float)((float)get_relative_ntime(IO_Latency)); 
 					second_hand = second_hand + Delta_Latency ;
 					IO_Count++; // increase IO count
 					if(Latency_state==1) // measure the time difference
 						fprintf(Latency_fp, "%.0f\tusec\n", (float)Delta_Latency);
 
-                                	if(print_IOPS == 1 && second_hand > 1000000
+                                	if(print_IOPS == 1 && second_hand > 1000000000
 							&& g_access == MODE_RND_WRITE) // check time to print out iops
 					{
 						fprintf(pIOPS_fp, "%lld IOPS\n", IO_Count);
@@ -1084,7 +1085,7 @@
 						IO_Count = 0; 
 						second_hand = 0;
 					}
-					else if(print_IOPS == 1 && second_hand > 1000000
+					else if(print_IOPS == 1 && second_hand > 1000000000
 							&& g_access == MODE_WRITE)
 					{
 						fprintf(pIOPS_fp, "%lld KB/s\n", IO_Count*i);
@@ -1144,7 +1145,7 @@
 					}
 				}		
 				// start measuring latency 
-				if(Latency_state==1 || print_IOPS == 1) IO_Latency=get_current_utime(); 
+				if(Latency_state==1 || print_IOPS == 1) IO_Latency=get_current_ntime(); 
 			 	if(read(fd, buf, real_reclen)<=0)
 			 	{
 					printf("File read error!!!\n");
@@ -1157,13 +1158,13 @@
 				if(Latency_state == 1 || print_IOPS ==1)
 				{
 					// get Delta time for an IO
-					Delta_Latency = (float)((float)get_relative_utime(IO_Latency)); 
+					Delta_Latency = (float)((float)get_relative_ntime(IO_Latency)); 
 					second_hand = second_hand + Delta_Latency ;
 					IO_Count++; // increase IO count
 					if(Latency_state==1) // measure the time difference
 						fprintf(Latency_fp, "%.0f\tusec\n", (float)Delta_Latency);
 
-                                	if(print_IOPS == 1 && second_hand > 1000000
+                                	if(print_IOPS == 1 && second_hand > 1000000000
 							&& g_access == MODE_RND_READ) // check time to print out iops
 					{
 						fprintf(pIOPS_fp, "%lld IOPS\n", IO_Count);
@@ -1171,7 +1172,7 @@
 						IO_Count = 0; 
 						second_hand = 0;
 					}
-					else if (print_IOPS == 1 && second_hand > 1000000
+					else if (print_IOPS == 1 && second_hand > 1000000000
 							&& g_access == MODE_READ)
 					{
 						fprintf(pIOPS_fp, "%lld KB/s\n", IO_Count*i);
@@ -1479,22 +1480,22 @@
    return -1; 
 }
 
-long long get_current_utime(void)
+long long get_current_ntime(void)
 {
-	struct timeval current;
+	struct timespec current;
 	
-	gettimeofday(&current,NULL);
+	clock_gettime(CLOCK_REALTIME, &current);
 	
-	return (current.tv_sec*1000000 + current.tv_usec);	
+	return (current.tv_sec*1000000000 + current.tv_nsec);	
 }
 
-long long get_relative_utime(long long start)
+long long get_relative_ntime(long long start)
 {
-	struct timeval current;
+	struct timespec current;
 	
-	gettimeofday(&current,NULL);
+	clock_gettime(CLOCK_REALTIME, &current);
 	
-	return (current.tv_sec*1000000 + current.tv_usec - start);		
+	return (current.tv_sec*1000000000 + current.tv_nsec - start);		
 }
 
 int get_new_fd(int fd_org)
@@ -1556,9 +1557,9 @@
 			flags = O_RDWR|O_CREAT|O_TRUNC;
 		}
 
-		io_time_start = get_current_utime();
+		io_time_start = get_current_ntime();
 		fd_ret = open(replay_pathname, flags, 0777);
-		io_time = get_relative_utime(io_time_start);
+		io_time = get_relative_ntime(io_time_start);
 		SCRIPT_PRINT("open %s --> %d\n", replay_pathname, fd_ret);
 		if(fd_ret > 0)
 		{
@@ -1620,9 +1621,9 @@
 
 		if(fd_new)
 		{
-			io_time_start = get_current_utime();
+			io_time_start = get_current_ntime();
 			ret = close(fd_new);
-			io_time = get_relative_utime(io_time_start);
+			io_time = get_relative_ntime(io_time_start);
 			SCRIPT_PRINT("close %d --> %d\n", fd_new, ret);
 		}
 		
@@ -1633,9 +1634,9 @@
 
 		if(fd_new > 0)
 		{
-			io_time_start = get_current_utime();
+			io_time_start = get_current_ntime();
 			ret = write(fd_new, script_write_buf, atoi(se->args[1]));
-			io_time = get_relative_utime(io_time_start);
+			io_time = get_relative_ntime(io_time_start);
 			SCRIPT_PRINT("write %d, %d --> %d\n", fd_new, atoi(se->args[1]), ret);
 			if(ret > 0)
 			{
@@ -1649,9 +1650,9 @@
 
 		if(fd_new > 0)
 		{
-			io_time_start = get_current_utime();
+			io_time_start = get_current_ntime();
 			ret = pwrite(fd_new, script_write_buf, atoi(se->args[2]), atoi(se->args[1]));
-			io_time = get_relative_utime(io_time_start);
+			io_time = get_relative_ntime(io_time_start);
 			SCRIPT_PRINT("pwrite %d, %d (at %d) --> %d\n", fd_new, atoi(se->args[2]), atoi(se->args[1]), ret);
 			if(ret > 0)
 			{
@@ -1665,9 +1666,9 @@
 
 		if(fd_new > 0)
 		{
-			io_time_start = get_current_utime();
+			io_time_start = get_current_ntime();
 			ret = read(fd_new, script_read_buf, atoi(se->args[1]));
-			io_time = get_relative_utime(io_time_start);
+			io_time = get_relative_ntime(io_time_start);
 			SCRIPT_PRINT("read %d, %d --> %d\n", fd_new, atoi(se->args[1]), ret);
 			if(ret > 0)
 			{
@@ -1681,9 +1682,9 @@
 
 		if(fd_new > 0)
 		{
-			io_time_start = get_current_utime();
+			io_time_start = get_current_ntime();
 			ret = pread(fd_new, script_read_buf, atoi(se->args[2]), atoi(se->args[1]));
-			io_time = get_relative_utime(io_time_start);
+			io_time = get_relative_ntime(io_time_start);
 			SCRIPT_PRINT("pread %d, %d (at %d) --> %d\n", fd_new, atoi(se->args[2]), atoi(se->args[1]), ret);
 			if(ret > 0)
 			{
@@ -1697,9 +1698,9 @@
 
 		if(fd_new > 0)
 		{
-			io_time_start = get_current_utime();
+			io_time_start = get_current_ntime();
 			ret = fsync(fd_new);
-			io_time = get_relative_utime(io_time_start);
+			io_time = get_relative_ntime(io_time_start);
 			SCRIPT_PRINT("fsync %d --> %d\n", fd_new, ret);
 		}
 	}
@@ -1709,9 +1710,9 @@
 
 		if(fd_new > 0)
 		{
-			io_time_start = get_current_utime();
+			io_time_start = get_current_ntime();
 			ret = fdatasync(fd_new);
-			io_time = get_relative_utime(io_time_start);
+			io_time = get_relative_ntime(io_time_start);
 			SCRIPT_PRINT("fdatasync %d --> %d\n", fd_new, ret);
 		}
 	}
@@ -1720,9 +1721,9 @@
 		strcpy(replay_pathname, &se->args[0][1]);
 		replay_pathname[strlen(replay_pathname)-1]='\0';
 
-		io_time_start = get_current_utime();
+		io_time_start = get_current_ntime();
 		ret = access(replay_pathname,  0777);
-		io_time = get_relative_utime(io_time_start);
+		io_time = get_relative_ntime(io_time_start);
 		SCRIPT_PRINT("access %s --> %d\n", replay_pathname, ret);
 	}
 	else if( strncmp(se->cmd, "stat", 4) == 0)
@@ -1731,9 +1732,9 @@
 		strcpy(replay_pathname, &se->args[0][1]);
 		replay_pathname[strlen(replay_pathname)-1]='\0';
 
-		io_time_start = get_current_utime();
+		io_time_start = get_current_ntime();
 		ret = stat64(replay_pathname,  &stat_buf);
-		io_time = get_relative_utime(io_time_start);
+		io_time = get_relative_ntime(io_time_start);
 		SCRIPT_PRINT("stat64 %s --> %d\n", replay_pathname, ret);
 	}
 	else if( strncmp(se->cmd, "lstat", 5) == 0)
@@ -1742,9 +1743,9 @@
 		strcpy(replay_pathname, &se->args[0][1]);
 		replay_pathname[strlen(replay_pathname)-1]='\0';
 
-		io_time_start = get_current_utime();
+		io_time_start = get_current_ntime();
 		ret = lstat64(replay_pathname,  &stat_buf);
-		io_time = get_relative_utime(io_time_start);
+		io_time = get_relative_ntime(io_time_start);
 		SCRIPT_PRINT("lstat64 %s --> %d\n", replay_pathname, ret);
 	}
 	else if( strncmp(se->cmd, "fstat", 5) == 0)
@@ -1754,9 +1755,9 @@
 
 		if(fd_new > 0)
 		{
-			io_time_start = get_current_utime();
+			io_time_start = get_current_ntime();
 			ret = fstat64(fd_new,  &stat_buf);
-			io_time = get_relative_utime(io_time_start);
+			io_time = get_relative_ntime(io_time_start);
 			SCRIPT_PRINT("fstat64 %d --> %d\n", fd_new, ret);
 		}
 	}
@@ -1765,9 +1766,9 @@
 		strcpy(replay_pathname, &se->args[0][1]);
 		replay_pathname[strlen(replay_pathname)-1]='\0';
 
-		io_time_start = get_current_utime();
+		io_time_start = get_current_ntime();
 		ret = unlink(replay_pathname);
-		io_time = get_relative_utime(io_time_start);
+		io_time = get_relative_ntime(io_time_start);
 		SCRIPT_PRINT("unlink %s --> %d\n", replay_pathname, ret);
 	}
 
@@ -1785,19 +1786,19 @@
 	gScriptThreadTime[thread_num].io_time = 0;
 	gScriptThreadTime[thread_num].write_size = 0;
 	gScriptThreadTime[thread_num].read_size = 0;
-	//printf("thread[%d] started at %lld, org %lld\n", thread_num, get_relative_utime(time_start), gScriptThreadTime[thread_num].start);
+	//printf("thread[%d] started at %lld, org %lld\n", thread_num, get_relative_ntime(time_start), gScriptThreadTime[thread_num].start);
 
 	for(i = 0; i < thread_info->line_count; i++)
 	{
 		if(gScriptEntry[i].thread_num == thread_num)
 		{
-			long long time_diff = gScriptEntry[i].time - get_relative_utime(time_start);
+			long long time_diff = gScriptEntry[i].time - get_relative_ntime(time_start);
 			if(time_diff > 1)
 			{
 				//printf("sleep %lld\n", time_diff);
 				usleep(time_diff-1);
 			}
-			//printf("%lld\n", get_relative_utime(time_start) - gScriptEntry[i].time);
+			//printf("%lld\n", get_relative_ntime(time_start) - gScriptEntry[i].time);
 			io_time = do_script(&gScriptEntry[i], &gScriptThreadTime[thread_num]);
 			usleep(0);
 			if(io_time >= 0)
@@ -1810,7 +1811,7 @@
 	}
 
 	gScriptThreadTime[thread_num].end = 1;
-	//printf("thread[%d] ended at %lld, org %lld\n", thread_num, get_relative_utime(time_start), gScriptThreadTime[thread_num].end);
+	//printf("thread[%d] ended at %lld, org %lld\n", thread_num, get_relative_ntime(time_start), gScriptThreadTime[thread_num].end);
 	return 0;
 }
 
@@ -1996,7 +1997,7 @@
 	script_thread_num = thread_index+1;	/* real number of threads */
 	printf("open count : %d\n", open_count);
 	printf("max size : W %d, R %d\n", max_write_size, max_read_size);
-	printf("original execution time : %.3f sec\n", (double)real_end_time/1000000);
+	printf("original execution time : %.6f sec\n", (double)real_end_time/1000000000);
 #if 0
 	for(i=0; i <= thread_index; i++)
 	{
@@ -2048,16 +2049,16 @@
 
 	drop_caches();
 	
-	time_start = get_current_utime();
+	time_start = get_current_ntime();
 	
 	while(1) {
-		time_current = get_relative_utime(time_start);
+		time_current = get_relative_ntime(time_start);
 		for(i = 0; i < 	script_thread_num; i++)
 		{
 			if(gScriptThreadTime[i].started == 0)
 			{
 				/* If the start time of a thread reached, create the thread. */
-				if(gScriptThreadTime[i].start <= (time_current+1000000))	/* 1sec margin */
+				if(gScriptThreadTime[i].start <= (time_current+1000000000))	/* 1sec margin */
 				{
 					thread_info[i].thread_num = gScriptThreadTime[i].thread_num;
 					thread_info[i].line_count = line_count;
@@ -2126,7 +2127,7 @@
 	}
 #endif	
 	printf("%s end\n", __func__);
-	printf("Total IO time : %.3f sec (%lld usec)\n", (double)total_io_time/1000000, total_io_time);
+	printf("Total IO time : %.6f sec (%lld usec)\n", (double)total_io_time/1000000000, total_io_time);
 	printf("Total IO count : %d \n", total_io_count);
 	printf("Total Write: %d bytes, Read: %d bytes\n", total_write, total_read);
 
@@ -2202,7 +2203,7 @@
 {
 	int ret = 0;
 	int count;
-	struct timeval T1, T2;
+	struct timespec TS1, TS2;
 	int i = 0;
 	char* maddr;
 	pthread_t	thread_id[MAX_THREADS];
@@ -2409,7 +2410,7 @@
 	drop_caches();
 
 	/* Start measuring data for performance */
-	gettimeofday(&T1,NULL);
+	clock_gettime(CLOCK_REALTIME, &TS1);
 	cpuUsage(START_CPU_CHECK);
 
 	setState(EXEC, NULL);
@@ -2434,8 +2435,8 @@
 	printf("[Messurement Result]\n");
 	printf("-----------------------------------------\n");
 	cpuUsage(END_CPU_CHECK);
-	gettimeofday(&T2,NULL);
-	print_time(T1, T2);
+	clock_gettime(CLOCK_REALTIME, &TS2);
+	print_time(TS1, TS2);
 
 	if(num_threads == 1)
 	{
